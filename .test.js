const generator = require('./dist/index').generator
;(async () => {
    const code = await generator(
        {
            classes: {
                BackofficeUser:
                    'preAuthorizer: auth.preAuthorizer\nmethods:\n    - method: createUser\n      sync: true\n      steps:\n          - id: default\n            handler: auth.createUser\n    - method: signIn\n      sync: true\n      readonly: true\n      steps:\n          - id: default\n            handler: auth.signIn\n    - method: updatePassword\n      sync: true\n      steps:\n          - id: default\n            handler: auth.updatePassword\n',
                CDH: 'getInstanceId: index.getInstanceId\nmethods:\n  - method: query\n    inputModel: QueryUserInput\n    outputModel: QueryUserOutput\n    sync: true\n    readonly: true\n    steps:\n        - id: default\n          handler: index.query\n',
                Homepage:
                    'preAuthorizer: index.preAuthorizer\ninit: index.init\ngetState: index.getState\ngetInstanceId: index.getInstanceId\nmethods:\n\n    - method: getHome\n      tag: default\n      inputModel: GetHomepageInput\n      outputModel: GetHomepageOutput\n      sync: true\n      steps:\n          - id: default\n            handler: index.getHome\n    \n    - method: upsertHomeData\n      tag: default\n      inputModel: UpsertHomepageInput\n      sync: true\n      steps:\n          - id: default\n            handler: index.upsertHomeData\n',
                MsisdnAuthenticator:
                    'preAuthorizer: index.preAuthorizer\ninit: \n  inputModel: GetMsisdnAuthInput\n  handler: index.init\ngetState: index.getState\ngetInstanceId: index.getInstanceId\nmethods:\n    - method: sendOtp\n      tag: otp\n      sync: true\n      steps:\n          - id: default\n            handler: index.sendOtp\n\n    - method: validateOtp\n      inputModel: ValidateOtpInput\n      outputModel: ValidateOtpOutput\n      tag: otp\n      sync: true\n      steps:\n          - id: default\n            handler: index.validateOtp\n\n    - method: signup\n      tag: signup\n      inputModel: SignUpInput\n      sync: true\n      steps:\n          - id: default\n            handler: index.signup\n',
                Places: 'getInstanceId: index.getInstanceId\nmethods:\n  - method: getPlaces\n    sync: true\n    readonly: true\n    steps:\n        - id: default\n          handler: index.getPlaces\n',
                Product:
                    'preAuthorizer: index.preAuthorizer\ninit: product.upsert\ngetState: index.getState\ngetInstanceId: index.getInstanceId\nmethods:\n  - method: get\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: product.getProduct\n  - method: update\n    tag: update\n    sync: true\n    steps:\n      - id: default\n        handler: product.upsert\n  - method: uploadImage\n    input: UploadImageInput\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: product.uploadImage\n    inputModel: UploadImageInput\n  - method: getImage\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: product.getImage\n',
                ProductManager:
                    'preAuthorizer: index.preAuthorizer\ninit: index.init\ngetState: index.getState\ngetInstanceId: index.getInstanceId\nmethods:\n  - method: getConfig\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: config.get\n  - method: updateConfig\n    inputModel: ConfigInput\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: config.update\n  - method: upsertAttribute\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: attribute.upsert\n    inputModel: AttributeInput\n  - method: removeAttribute\n    inputModel: RemoveAttributeInput\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: attribute.remove\n  - method: listAttributes\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: attribute.list\n  - method: upsertCategory\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: category.handler\n    inputModel: UpsertCategoryInput\n  - method: removeCategory\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: category.handler\n    inputModel: RemoveCategoryInput\n  - method: addImageToCategory\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: category.handler\n    inputModel: AddImageToCategoryInput\n  - method: listCategories\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: category.handler\n  - method: getCategoryTree\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: category.handler\n  - method: getCategoryImage\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: category.handler\n  - method: syncProduct\n    tag: test\n    sync: false\n    steps:\n      - id: default\n        handler: product.syncProduct\n  - method: listProducts\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: product.list\n  - method: importProducts\n    tag: test\n    sync: false\n    steps:\n      - id: default\n        handler: product.importProducts\n  - method: syncProducts\n    tag: test\n    sync: false\n    steps:\n      - id: default\n        handler: product.syncProducts\n  - method: search\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: product.search\n    inputModel: SearchListingProductsInput\n  - method: triggerExport\n    tag: test\n    sync: true\n    steps:\n      - id: default\n        handler: product.triggerExport\n  - method: exporter\n    tag: test\n    sync: false\n    steps:\n      - id: default\n        handler: product.exporter\n  - method: getFile\n    tag: test\n    sync: true\n    readonly: true\n    steps:\n      - id: default\n        handler: product.getFile\n',
                User: 'preAuthorizer: auth.preAuthorizer\ninit: index.init\ndependencies:\n  - utils\ngetState: index.getState\nmethods:\n\n    - method: updateEmail\n      tag: auth\n      sync: true\n      steps:\n          - id: default\n            handler: auth.updateEmail\n\n    - method: validateEmail\n      tag: auth\n      sync: true\n      steps:\n          - id: default\n            handler: auth.validateEmail\n\n    - method: signup\n      inputModel: UserSignUpInput\n      tag: profile\n      sync: true\n      steps:\n          - id: default\n            handler: profile.signup\n\n\n    # - method: setAvatar\n    #   tag: profile\n    #   sync: true\n    #   steps:\n    #       - id: default\n    #         handler: profile.setAvatar\n\n\n    # - method: getAvatar\n    #   tag: profile\n    #   sync: true\n    #   steps:\n    #       - id: default\n    #         handler: profile.getAvatar\n\n\n    - method: updateProfile\n      inputModel : UpdateProfileInput\n      tag: profile\n      sync: true\n      steps:\n          - id: default\n            handler: profile.updateProfile\n\n\n    # - method: getProfile\n    #   tag: profile\n    #   sync: true\n    #   readOnly: true\n    #   steps:\n    #       - id: default\n    #         handler: profile.getProfile\n\n    # - method: clearAddresses\n    #   tag: profile\n    #   sync: true\n    #   steps:\n    #       - id: default\n    #         handler: profile.clearAddresses\n\n    - method: isSignupComplete\n      tag: profile\n      sync: true\n      steps:\n          - id: default\n            handler: profile.isSignupComplete\n\n    - method: upsertAddress\n      tag: address\n      inputModel: Address\n      sync: true\n      steps:\n          - id: default\n            handler: address.upsertAddress\n\n    - method: removeAddress\n      tag: address\n      inputModel: RemoveAddressInput\n      sync: true\n      steps:\n          - id: default\n            handler: address.removeAddress\n',
            },
            models: {
                AddImageToCategoryInput: {
                    type: 'object',
                    properties: { id: { type: 'string' }, content: { type: 'string' } },
                    required: ['id', 'content'],
                    additionalProperties: false,
                },
                Address: {
                    properties: {
                        addressId: { type: 'string' },
                        title: { type: 'string', minLength: 1 },
                        nameSurname: { type: 'string' },
                        alternativeRecipient: { type: 'string' },
                        country: { type: 'string' },
                        city: { type: 'string' },
                        district: { type: 'string' },
                        neighborhood: { type: 'string' },
                        street: { type: 'string' },
                        building: { type: 'string' },
                        door: { type: 'string' },
                        floor: { type: 'string' },
                        postalCode: { type: 'string' },
                        phoneNumber: { type: 'string' },
                        location: { $ref: '#/$defs/Location' },
                        invoiceType: { enum: ['NONE', 'E-ARSIV', 'INDIVIDUAL', 'CORPORATE'], type: 'string', default: 'NONE' },
                        identityNo: { type: 'string', minLength: 1 },
                        companyName: { type: 'string', minLength: 1 },
                        taxNo: { type: 'string', minLength: 1 },
                        taxOffice: { type: 'string', minLength: 1 },
                        text: { type: 'string' },
                        createdAt: { type: 'number' },
                        updatedAt: { type: 'number' },
                    },
                    allOf: [
                        {
                            if: { properties: { invoiceType: { const: 'NONE' } } },
                            then: { required: ['title', 'country', 'city', 'district', 'neighborhood', 'street', 'building', 'door', 'floor'] },
                        },
                        {
                            if: { properties: { invoiceType: { const: 'E-ARSIV' } } },
                            then: {
                                required: [
                                    'title',
                                    'country',
                                    'city',
                                    'district',
                                    'neighborhood',
                                    'street',
                                    'building',
                                    'door',
                                    'floor',
                                    'identityNo',
                                ],
                            },
                        },
                        {
                            if: { properties: { invoiceType: { const: 'CORPORATE' } } },
                            then: {
                                required: [
                                    'title',
                                    'country',
                                    'city',
                                    'district',
                                    'neighborhood',
                                    'street',
                                    'building',
                                    'door',
                                    'floor',
                                    'identityNo',
                                    'companyName',
                                    'taxNo',
                                    'taxOffice',
                                ],
                            },
                        },
                    ],
                    type: 'object',
                },
                AttributeInput: {
                    type: 'object',
                    properties: {
                        _createdBy: { type: 'string' },
                        _updatedBy: { type: 'string' },
                        _createdAt: { type: 'number' },
                        _updatedAt: { type: 'number' },
                        id: { type: 'string', minLength: 1 },
                        name: { type: 'object', additionalProperties: { type: 'string' } },
                        type: { type: 'string', enum: ['string', 'number', 'boolean', 'array', 'enum', 'record'] },
                        default: {},
                        isRequired: { type: 'boolean', default: false },
                        isLocalized: { type: 'boolean', default: false },
                        options: { type: 'array', items: { type: 'string' } },
                        listing: { type: 'boolean', default: false },
                    },
                    required: ['id', 'name', 'type'],
                    additionalProperties: false,
                },
                ConfigInput: {
                    type: 'object',
                    properties: {
                        locales: { type: 'array', items: { type: 'string', enum: ['tr_TR', 'en_US', 'ru_RU'] }, minItems: 1 },
                        rootCategoryId: { type: 'string', default: 'master' },
                    },
                    required: ['locales'],
                    additionalProperties: false,
                },
                FindNearestStoreInput: {
                    type: 'object',
                    description: 'User coordinate',
                    properties: { lat: { type: 'number' }, lng: { type: 'number' } },
                    required: ['lat', 'lng'],
                },
                GetHomepageInput: {
                    type: 'object',
                    description: "A client calls Homepage class's getHome method with this input.",
                    properties: {
                        segment: { type: 'string' },
                        storeId: { type: 'string' },
                        cacheDuration: { type: 'number' },
                        platform: { type: 'string', enum: ['WEB', 'IOS', 'ANDROID'] },
                    },
                    required: ['platform'],
                },
                GetHomepageOutput: {
                    type: 'object',
                    description: 'Home page model describing what to show on clients home page.',
                    properties: {
                        stories: { type: 'array', items: { $ref: '#/$defs/HomepageStory' } },
                        banners: { type: 'array', items: { $ref: '#/$defs/HomepageBanner' } },
                    },
                    required: ['stories', 'banners'],
                },
                GetImageInput: {
                    type: 'object',
                    properties: {
                        id: { type: 'string' },
                        width: { type: 'number', default: 128 },
                        height: { type: 'number', default: 128 },
                        quality: { type: 'number', minimum: 10, maximum: 100, default: 25 },
                        fit: { type: 'string', enum: ['contain', 'cover', 'fill', 'inside', 'outside'], default: 'inside' },
                    },
                    required: ['id'],
                    additionalProperties: false,
                },
                GetMsisdnAuthInput: {
                    properties: { msisdn: { type: 'string', minLength: 12, maxLength: 12, pattern: '^[0-9]*$' } },
                    required: ['msisdn'],
                    type: 'object',
                },
                HomepageBanner: {
                    required: ['title', 'imageUrl'],
                    allOf: [{ $ref: '#/$defs/HomepageBaseModel' }],
                    description: 'An object representing a banner in home page of the app.',
                    type: 'object',
                    properties: { imageUrl: { type: 'string' }, title: { type: 'string' } },
                },
                HomepageBaseModel: {
                    required: [],
                    properties: {
                        excludeSegments: { type: 'array', items: { type: 'string' } },
                        includeSegments: { type: 'array', items: { type: 'string' } },
                        expireDate: { type: 'number' },
                        excludeStores: { type: 'array', items: { type: 'string' } },
                        includeStores: { items: { type: 'string' }, type: 'array' },
                    },
                    description: '',
                    type: 'object',
                },
                HomepageStory: {
                    type: 'object',
                    description: 'An object representing a story in home page of the app.',
                    properties: { title: { type: 'string' }, imageUrl: { type: 'string' }, isStarred: { type: 'boolean' } },
                    allOf: [{ $ref: '#/$defs/HomepageBaseModel' }],
                    required: ['title', 'imageUrl', 'isStarred'],
                },
                IsSignUpCompleteOutput: {
                    properties: { isSignupComplete: { type: 'boolean' }, userId: { type: 'string' } },
                    required: ['userId', 'isSignupComplete'],
                    type: 'object',
                },
                Location: { properties: { lat: { type: 'number' }, lng: { type: 'number' } }, required: ['lat', 'lng'], type: 'object' },
                Product: {
                    type: 'object',
                    properties: {
                        _createdBy: { type: 'string' },
                        _updatedBy: { type: 'string' },
                        _createdAt: { type: 'number' },
                        _updatedAt: { type: 'number' },
                        id: { type: 'string' },
                        isEnabled: { type: 'boolean', default: true },
                        hash: { type: 'string' },
                        images: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: { type: 'string' },
                                    tags: { type: 'array', items: { type: 'string' }, default: [] },
                                    url: { type: 'string' },
                                },
                                required: ['id'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                        attributes: { type: 'object', additionalProperties: {} },
                    },
                    required: ['id'],
                    additionalProperties: false,
                },
                ProductInitInput: {
                    type: 'object',
                    properties: { id: { type: 'string', minLength: 1 } },
                    required: ['id'],
                    additionalProperties: true,
                },
                ProductUpdateInput: {
                    type: 'object',
                    properties: { attributes: { type: 'object' } },
                    required: ['attributes'],
                    additionalProperties: true,
                },
                QueryUserInput: {
                    properties: { msisdn: { type: 'string', minLength: 12, maxLength: 12, pattern: '^[0-9]*$' } },
                    required: ['msisdn'],
                    type: 'object',
                },
                QueryUserOutput: { properties: { customerId: { type: 'string' } }, required: ['customerId'], type: 'object' },
                RemoveAddressInput: { properties: { addressId: { type: 'string', minLength: 1 } }, required: ['addressId'], type: 'object' },
                RemoveAttributeInput: { type: 'object', properties: { id: { type: 'string' } }, required: ['id'], additionalProperties: false },
                RemoveCategoryInput: { type: 'object', properties: { id: { type: 'string' } }, required: ['id'], additionalProperties: false },
                SayHelloInput: {
                    type: 'object',
                    properties: {
                        firstName: { type: 'string', description: "The person's first name." },
                        lastName: { type: 'string', description: "The person's last name." },
                        age: { description: 'Age in years which must be equal to or greater than zero.', type: 'integer', minimum: 0 },
                    },
                },
                SearchListingProductsInput: {
                    type: 'object',
                    properties: {
                        q: { type: 'string' },
                        size: { type: 'number', minimum: 0, maximum: 50, default: 10 },
                        from: { type: 'number', minimum: 0, default: 0 },
                    },
                    additionalProperties: false,
                },
                SignUpInput: {
                    properties: {
                        signupToken: { type: 'string', minLength: 1 },
                        firstName: { type: 'string', minLength: 2 },
                        lastName: { type: 'string', minLength: 2 },
                        email: { type: 'string', format: 'email' },
                        birthdate: { type: 'string', format: 'date' },
                        gender: { type: 'string', enum: ['male', 'female'] },
                        contactCampaign: { type: 'boolean', default: false },
                    },
                    required: ['firstName', 'lastName', 'email', 'birthdate', 'gender', 'signupToken'],
                    type: 'object',
                },
                SigninInput: { properties: { password: { type: 'string', minLength: 8 } }, required: ['password'], type: 'object' },
                StoreDecreaseStockInput: { type: 'array', items: { $ref: '#/$defs/StoreIncreaseDecreaseItem' } },
                StoreGetInstanceIdInput: { type: 'object', properties: { storeId: { type: 'string' } }, required: ['storeId'] },
                StoreGetProductBySku: { type: 'array', items: { type: 'string' } },
                StoreIncreaseDecreaseItem: {
                    type: 'object',
                    properties: { sku: { type: 'string' }, quantity: { type: 'integer', minimum: 1 } },
                    required: ['sku', 'quantity'],
                },
                StoreIncreaseStockInput: { type: 'array', items: { $ref: '#/$defs/StoreIncreaseDecreaseItem' } },
                StoreInfo: {
                    type: 'object',
                    properties: {
                        storeId: { type: 'string' },
                        lat: { type: 'number' },
                        lng: { type: 'number' },
                        radiusInMeter: { type: 'integer' },
                        isDeleted: { type: 'boolean', default: false },
                    },
                    required: ['storeId', 'lat', 'lng', 'radiusInMeter'],
                },
                StoreProduct: {
                    type: 'object',
                    properties: {
                        stock: { type: 'integer', minimum: 0 },
                        isDisabled: { type: 'boolean', default: false },
                        prices: { $ref: '#/$defs/StoreProductPrice' },
                    },
                },
                StoreProductDeleteInput: { type: 'object', properties: { sku: { type: 'string' } }, required: ['sku'] },
                StoreProductPrice: {
                    type: 'object',
                    patternProperties: {
                        '[a-zA-Z0-9_]': {
                            type: 'object',
                            properties: { normal: { type: 'integer', minimum: 0 }, discounted: { type: 'integer', minimum: 0 } },
                            required: ['normal', 'discounted'],
                        },
                    },
                    additionalProperties: false,
                },
                StoreProductPriceSyncObject: {
                    type: 'object',
                    properties: { storeId: { type: 'string' }, prices: { $ref: '#/$defs/StoreProductPrice' }, sku: { type: 'string' } },
                    required: ['prices', 'sku', 'storeId'],
                },
                StoreProductStockSyncObject: {
                    type: 'object',
                    properties: { storeId: { type: 'string' }, stock: { type: 'integer' }, sku: { type: 'string' } },
                    required: ['stock', 'sku', 'storeId'],
                },
                StoreSetProductPrice: {
                    type: 'object',
                    properties: { prices: { $ref: '#/$defs/StoreProductPrice' }, sku: { type: 'string' } },
                    required: ['prices', 'sku'],
                },
                StoreSetProductStock: {
                    type: 'object',
                    properties: { stock: { type: 'integer', minimum: 0 }, sku: { type: 'string' } },
                    required: ['stock', 'sku'],
                },
                StoreSkuInput: { type: 'object', properties: { sku: { type: 'string' } }, required: ['sku'] },
                StoreUpsertFeedURLs: {
                    type: 'object',
                    properties: {
                        storesUrl: { type: 'string', format: 'uri' },
                        stocksUrl: { type: 'string', format: 'uri' },
                        pricesUrl: { type: 'string', format: 'uri' },
                    },
                },
                StoreUpsertOrderInput: { type: 'object', properties: { orderId: { type: 'string' }, status: { type: 'string' } } },
                SyncStoresInput: {
                    type: 'object',
                    properties: { url: { description: 'Url method should be get and url response should be json string', type: 'string' } },
                    required: ['url'],
                },
                UpdateConfigInput: {
                    type: 'object',
                    properties: { locales: { type: 'array', minItems: 1, items: { type: 'string', enum: ['tr_TR', 'en_US', 'ru_RU'] } } },
                    required: ['locales'],
                    additionalProperties: false,
                },
                UpdateEmailInput: { properties: { email: { type: 'string', format: 'email' } }, required: ['email'], type: 'object' },
                UpdatePasswordInput: {
                    properties: { oldPassword: { type: 'string', minLength: 8 }, password: { type: 'string', minLength: 8 } },
                    required: ['oldPassword', 'password'],
                    type: 'object',
                },
                UpdateProductInput: {
                    type: 'object',
                    properties: {
                        _createdBy: { type: 'string' },
                        _updatedBy: { type: 'string' },
                        _createdAt: { type: 'number' },
                        _updatedAt: { type: 'number' },
                        id: { type: 'string' },
                        isEnabled: { type: 'boolean', default: true },
                        _hash: { type: 'string' },
                        images: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: { id: { type: 'string' }, tags: { type: 'array', items: { type: 'string' } }, url: { type: 'string' } },
                                required: ['id'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                        attributes: { type: 'object', additionalProperties: {} },
                        categories: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: { id: { type: 'string' }, name: { type: 'object', additionalProperties: { type: 'string' } } },
                                required: ['id', 'name'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                    },
                    required: ['id'],
                    additionalProperties: false,
                },
                UpdateProductOutput: {
                    type: 'object',
                    properties: {
                        _createdBy: { type: 'string' },
                        _updatedBy: { type: 'string' },
                        _createdAt: { type: 'number' },
                        _updatedAt: { type: 'number' },
                        id: { type: 'string' },
                        isEnabled: { type: 'boolean', default: true },
                        _hash: { type: 'string' },
                        images: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: { id: { type: 'string' }, tags: { type: 'array', items: { type: 'string' } }, url: { type: 'string' } },
                                required: ['id'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                        attributes: { type: 'object', additionalProperties: {} },
                        categories: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: { id: { type: 'string' }, name: { type: 'object', additionalProperties: { type: 'string' } } },
                                required: ['id', 'name'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                    },
                    required: ['id'],
                    additionalProperties: false,
                },
                UpdateProfileInput: {
                    properties: {
                        firstName: { type: 'string', minLength: 2 },
                        lastName: { type: 'string', minLength: 2 },
                        birthdate: { type: 'string', format: 'date' },
                        gender: { type: 'string', enum: ['male', 'female'] },
                        contactCampaign: { type: 'boolean', default: false },
                    },
                    required: ['firstName', 'lastName', 'birthdate', 'gender'],
                    type: 'object',
                },
                UploadImageInput: {
                    type: 'object',
                    properties: { content: { type: 'string' }, tags: { type: 'array', items: { type: 'string' } } },
                    required: ['content'],
                    additionalProperties: false,
                },
                UpsertCategoryInput: {
                    type: 'object',
                    properties: {
                        id: { type: 'string' },
                        parentId: { type: ['string', 'null'], default: null },
                        name: { type: 'object', additionalProperties: { type: 'string' } },
                        description: { type: 'object', additionalProperties: { type: 'string' } },
                        sortingOrder: { type: 'number', default: 0 },
                        images: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: { type: 'string' },
                                    tags: { type: 'array', items: { type: 'string' }, default: [] },
                                    url: { type: 'string' },
                                },
                                required: ['id'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                    },
                    required: ['id', 'name'],
                    additionalProperties: false,
                },
                UpsertHomepageInput: {
                    description: "Ecom client calls Homepage class's upsertHomepage method with this input.",
                    type: 'object',
                    required: ['stories', 'platform'],
                    properties: {
                        platform: { type: 'string', enum: ['WEB', 'IOS', 'ANDROID'] },
                        stories: { items: { $ref: '#/$defs/HomepageStory' }, type: 'array' },
                        banners: { items: { $ref: '#/$defs/HomepageBanner' }, type: 'array' },
                    },
                },
                UpsertProductInput: {
                    type: 'object',
                    properties: {
                        _createdBy: { type: 'string' },
                        _updatedBy: { type: 'string' },
                        _createdAt: { type: 'number' },
                        _updatedAt: { type: 'number' },
                        id: { type: 'string' },
                        isEnabled: { type: 'boolean', default: true },
                        hash: { type: 'string' },
                        images: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: { type: 'string' },
                                    tags: { type: 'array', items: { type: 'string' }, default: [] },
                                    url: { type: 'string' },
                                },
                                required: ['id'],
                                additionalProperties: false,
                            },
                            default: [],
                        },
                        attributes: { type: 'object', additionalProperties: {} },
                    },
                    required: ['id'],
                    additionalProperties: false,
                },
                UserSignUpInput: {
                    properties: {
                        firstName: { type: 'string', minLength: 2 },
                        lastName: { type: 'string', minLength: 2 },
                        email: { type: 'string', format: 'email' },
                        msisdn: { type: 'string', minLength: 12, maxLength: 12, pattern: '^[0-9]*$' },
                        birthdate: { type: 'string', format: 'date' },
                        gender: { type: 'string', enum: ['male', 'female'] },
                        contactCampaign: { type: 'boolean', default: false },
                    },
                    required: ['firstName', 'lastName', 'email', 'msisdn', 'birthdate', 'gender'],
                    type: 'object',
                },
                ValidateOtpInput: { properties: { otp: { type: 'string', minLength: 6, maxLength: 6 } }, required: ['otp'], type: 'object' },
                ValidateOtpOutput: {
                    properties: {
                        customToken: { type: 'string' },
                        signupToken: { type: 'string' },
                        authStatus: {
                            enum: ['SIGNUP_REQUIRED', 'SUCCESS', 'AUTH_FAILED_INVALID_OTP', 'TOO_MANY_ATTEMPTS'],
                            type: 'string',
                            default: 'AUTH_FAILED_INVALID_OTP',
                        },
                    },
                    type: 'object',
                    required: ['authStatus'],
                },
            },
        },
        'typescript-client',
    )
    console.log(code)
})()
